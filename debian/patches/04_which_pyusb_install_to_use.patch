Description: This patch makes sure that ubertooth uses the version of
 pyusb bundled together (made by patch 03_.....patch)
Author: Ruben Undheim <ruben.undheim@gmail.com>

--- ubertooth-20141130git241874e.orig/host/python/CMakeLists.txt
+++ ubertooth-20141130git241874e/host/python/CMakeLists.txt
@@ -26,6 +26,7 @@ if(NOT PYTHONINTERP_FOUND)
 else()
 	add_subdirectory(specan_ui)
 	add_subdirectory(usb_dfu)
+	add_subdirectory(usb)
 endif()
 
 # Create uninstall target
--- ubertooth-20141130git241874e.orig/host/python/specan_ui/specan/Ubertooth.py
+++ ubertooth-20141130git241874e/host/python/specan_ui/specan/Ubertooth.py
@@ -21,7 +21,7 @@
 
 # http://pyusb.sourceforge.net/docs/1.0/tutorial.html
 
-import usb.core
+import ubertooth_pyusb.core
 import struct
 import sys
 import time
@@ -89,7 +89,7 @@ if __name__ == '__main__':
         (0xFFFF, 0x0004)  # TC13BADGE / Ubertooth with older firmware
     ]
     for vendor, product in ids:
-        device = usb.core.find(idVendor=vendor, idProduct=product)
+        device = ubertooth_pyusb.core.find(idVendor=vendor, idProduct=product)
         if device:
             break
     else:
--- ubertooth-20141130git241874e.orig/host/python/specan_ui/ubertooth-specan-ui
+++ ubertooth-20141130git241874e/host/python/specan_ui/ubertooth-specan-ui
@@ -24,7 +24,7 @@ import threading
 
 import numpy
 
-import usb.core
+import ubertooth_pyusb.core
 
 from PySide import QtCore, QtGui
 from PySide.QtCore import Qt, QPointF, QLineF
@@ -245,7 +245,7 @@ class Window(QtGui.QWidget):
             (0xFFFF, 0x0004)  # TC13BADGE / Ubertooth with older firmware
         ]
         for vendor, product in ids:
-            device = usb.core.find(idVendor=vendor, idProduct=product)
+            device = ubertooth_pyusb.core.find(idVendor=vendor, idProduct=product)
             if device:
                 return Ubertooth(device)
         raise Exception('Device not found')
--- ubertooth-20141130git241874e.orig/host/python/usb_dfu/dfu/dfu.py
+++ ubertooth-20141130git241874e/host/python/usb_dfu/dfu/dfu.py
@@ -222,11 +222,11 @@ def detach(dfu):
 
 def init_dfu(idVendor, idProduct):
     try:
-        import usb.core
+        import ubertooth_pyusb.core
     except ImportError, e:
         print "Error: cannot import pyUSB. Check that pyUSB and libUSB 1.0 are installed."
         raise
-    dev = usb.core.find(idVendor=idVendor, idProduct=idProduct)
+    dev = ubertooth_pyusb.core.find(idVendor=idVendor, idProduct=idProduct)
     if dev is None:
         raise RuntimeError('Device not found')
 
@@ -235,7 +235,7 @@ def init_dfu(idVendor, idProduct):
 
     try:
         dfu.enter_dfu_mode()
-    except usb.core.USBError, e:
+    except ubertooth_pyusb.core.USBError, e:
         if len(e.args) > 0 and 'Pipe error' in e.args:
             raise RuntimeError('Failed to enter DFU mode. Is bootloader running?')
         else:
--- ubertooth-20141130git241874e.orig/host/python/usb_dfu/ubertooth-dfu
+++ ubertooth-20141130git241874e/host/python/usb_dfu/ubertooth-dfu
@@ -41,7 +41,7 @@ def set_flash_mode(vendor=None, product=
     A function to find Ubertooth devices in firmware mode and allow the user to
     change them in to bootloader mode (without calling ubertooth-util -f)
     '''
-    import usb.core, time
+    import ubertooth_pyusb.core, time
     print "No DFU devices found - attempting to find Ubertooth devices\n"
     ids = [
         (0x1D50, 0x6002, "Ubertooth One"),
@@ -50,7 +50,7 @@ def set_flash_mode(vendor=None, product=
     ]
     devices = []
     for vendor_id, product_id, device in ids:
-        devs = usb.core.find(idVendor=vendor_id, idProduct=product_id, find_all=True)
+        devs = ubertooth_pyusb.core.find(idVendor=vendor_id, idProduct=product_id, find_all=True)
         if devs:
             for dev in devs:
                 devices.append(dev)
@@ -69,7 +69,7 @@ def set_flash_mode(vendor=None, product=
                     dev = devices[value - 1]
                     try:
                         dev.ctrl_transfer(0x40, UBERTOOTH_FLASH, 0, 0, None)
-                    except usb.core.USBError, e:
+                    except ubertooth_pyusb.core.USBError, e:
                         # Expected disconnect
                         msg = getattr(e, 'message')
                         if msg and not msg.startswith('No such device'):
